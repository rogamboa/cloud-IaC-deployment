Description: >
    Server Infrastructure Stack.

Mappings: 
  UbuntuAMI: 
    us-east-1: 
      AMI: ami-00ddb0e5626798373
    us-east-2: 
      AMI: ami-0dd9f0e7df0f0a138
    us-west-1: 
      AMI: ami-0a741b782c2c8632d
    us-west-2: 
      AMI: ami-0ac73f33a1888c64a
      
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: "Environment and Instance Type Configuration"
              Parameters:
                  - EnvironmentName
                  - InstanceType
            - Label:
                  default: "S3 URI of Deployment Zip File"
              Parameters:
                  - S3Uri
                  - ZipFileName
            - Label:
                  default: "Autoscaling Group Configuration"
              Parameters:
                  - ServerASGMinSize
                  - ServerASGDesiredSize
                  - ServerASGMaxSize
            - Label:
                  default: "Bastion Host Configuration"
              Parameters:
                  - BastionHostCreation
                  - KeyPairName
                  - AllowIpToBastionHost
                  
Parameters:
    EnvironmentName:
        Type: String
        Description: Environment name that will be used as a prefix for resource names
        
    InstanceType:
        Type: String
        Description: Instance type to use for servers
        Default: t2.micro
        AllowedValues:
          - t2.micro
          - t2.small
          - t2.medium
          - t3.micro
          - t3.small
          - t3.medium
    
    ServerASGMinSize:
        Type: Number
        Description: Minimum number of instances for server autoscaling group to maintain
        Default: 1
 
    ServerASGDesiredSize:
        Type: Number
        Description: Desired number of instances for server autoscaling group to maintain
        Default: 2
        
    ServerASGMaxSize:
        Type: Number
        Description: Maximum number of instances for server autoscaling group to maintain
        Default: 2
        
    BastionHostCreation:
        Type: String
        Description: Create a bastion host for server access in private subnets
        AllowedValues:
            - true
            - false
        Default: true
        
    KeyPairName:
        Type: String
        Description: Key pair name to use for bastion host access and server access (Only used if BastionHost is set to true)
        
    AllowIpToBastionHost:
        Type: String
        Description: Ip address or IP CIDR block to allow access to bastion host (Only used if BastionHost is set to true)
        AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([1-2][0-9]|[3][0-2]|[0-9])$
        ConstraintDescription: A valid IP CIDR block must be inputed.
        
    S3Uri:
        Type: String
        Description: S3 URI of where deployment zip file is located (full path to .zip file in S3)

    ZipFileName:
        Type: String
        Description: Name of zip file (with .zip extension)
                      
Conditions:
    CreateBastionHostResources: !Equals
        - !Ref BastionHostCreation
        - true
        
Resources:
    LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http traffic to load balancer
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
                    
    ServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http traffic to servers and SSH from local net
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0             
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData: 
                Fn::Base64:
                    !Sub |
                        #!/bin/bash
                        apt-get update -y && apt-get upgrade -y
                        apt-get install -y python3-setuptools
                        mkdir -p /opt/aws/bin
                        wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
                        python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
                        apt install unzip -y
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        ./aws/install && rm -rf ./aws ./awscliv2.zip
                        apt-get install apache2 -y
                        systemctl start apache2.service
                        cd /var/www/html
                        /usr/local/bin/aws s3 cp ${S3Uri} .
                        unzip -o ${ZipFileName}
                        rm ${ZipFileName}
                        /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebAppASGroup --region ${AWS::Region}
            ImageId: !FindInMap [UbuntuAMI, !Ref AWS::Region, AMI]
            IamInstanceProfile: !Ref InstanceProfileForS3ReadOnlyAccess
            SecurityGroups:
                - Ref: ServerSecGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sda1"
                  Ebs:
                      VolumeSize: '10'
            KeyName:
                Fn::If: 
                    - CreateBastionHostResources 
                    - !Ref KeyPairName
                    - !Ref AWS::NoValue
    
    WebAppASGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            MinSize: !Ref ServerASGMinSize
            DesiredCapacity: !Ref ServerASGDesiredSize
            MaxSize: !Ref ServerASGMaxSize
            VPCZoneIdentifier:
                - Fn::ImportValue:
                    !Sub ${EnvironmentName}-PRIV-SUBNET-LIST
            LaunchConfigurationName:
                !Ref WebAppLaunchConfig
            TargetGroupARNs:
                - !Ref AppTargetGroup
        CreationPolicy:
            ResourceSignal: 
                Count: !Ref ServerASGDesiredSize
                Timeout: PT25M
                
    AppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            
    AppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            IpAddressType: ipv4
            Scheme: internet-facing
            SecurityGroups:
                - !Ref LoadBalancerSecGroup
            Subnets:
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SUBNET
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SUBNET
                
    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref AppTargetGroup
            LoadBalancerArn:
                !Ref AppLoadBalancer
            Port: 80
            Protocol: HTTP
            
    AppLBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref AppTargetGroup
            Conditions:
                - Field: path-pattern
                  Values: 
                    - /
            ListenerArn: !Ref LoadBalancerListener
            Priority: 1
                  
    
    InstanceProfileForS3ReadOnlyAccess:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref S3ReadOnlyAccessRole
                
    S3ReadOnlyAccessRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                          - ec2.amazonaws.com
                      Action:
                      - sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

    BastionHostSecGroup:
        Type: AWS::EC2::SecurityGroup
        Condition: CreateBastionHostResources
        Properties: 
            GroupDescription: Allow ssh access ingress to bastion host and egress to private nets
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: !Ref AllowIpToBastionHost
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  DestinationSecurityGroupId: !Ref ServerSecGroup
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"

    BastionHost:
        Type: AWS::EC2::Instance
        Condition: CreateBastionHostResources
        Properties:
            UserData: 
                Fn::Base64:
                    !Sub |
                        #!/bin/bash
                        apt-get update -y && apt-get upgrade -y
                        apt-get install -y python3-setuptools
                        mkdir -p /opt/aws/bin
                        wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
                        python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
                        /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
            ImageId: !FindInMap [UbuntuAMI, !Ref AWS::Region, AMI]
            SecurityGroupIds:
                - Ref: BastionHostSecGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sda1"
                  Ebs:
                      VolumeSize: '8'
            KeyName: !Ref KeyPairName
            SubnetId:
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-PUB1-SUBNET
        CreationPolicy:
            ResourceSignal:
                Count: 1
                Timeout: PT25M

Outputs:
    AppLoadBalancerDNSName:
        Description: DNS name of application load balancer for servers
        Value: !Sub
            - http://${domain}
            - { domain: !GetAtt AppLoadBalancer.DNSName }
        Export:
            Name: !Sub ${EnvironmentName}-APP-ALB-DNS-NAME
